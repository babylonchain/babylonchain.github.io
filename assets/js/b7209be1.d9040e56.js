"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[1648],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4724:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={id:"deployment-overview",sidebar_label:"Overview of Validator Deployment",hide_table_of_contents:!0},i="Overview of Validator Deployment",s={unversionedId:"user-guides/btc-staking-testnet/deployment-overview",id:"user-guides/btc-staking-testnet/deployment-overview",title:"Overview of Validator Deployment",description:"Overview of validator deployment",source:"@site/docs/user-guides/btc-staking-testnet/deployment-overview.md",sourceDirName:"user-guides/btc-staking-testnet",slug:"/user-guides/btc-staking-testnet/deployment-overview",permalink:"/docs/user-guides/btc-staking-testnet/deployment-overview",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/user-guides/btc-staking-testnet/deployment-overview.md",tags:[],version:"current",frontMatter:{id:"deployment-overview",sidebar_label:"Overview of Validator Deployment",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"Bitcoin Staking Testnet-3 (Sunset)",permalink:"/docs/user-guides/btc-staking-testnet/overview"},next:{title:"Network Information",permalink:"/docs/user-guides/btc-staking-testnet/network-information"}},l={},c=[],d={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview-of-validator-deployment"},"Overview of Validator Deployment"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Overview of validator deployment",src:n(85815).Z,width:"2432",height:"1729"})),(0,a.kt)("p",null,"In this testnet, the Babylon Bitcoin staking protocol secures the Babylon blockchain\nvia an extra round of voting on top of the CometBFT consensus, called the\n",(0,a.kt)("em",{parentName:"p"},"finality round"),". This round is conducted by ",(0,a.kt)("em",{parentName:"p"},"finality providers"),', which are the\n"validators" that accept Bitcoin as stake delegations. Finality providers use\ntheir EOTS keys to cast finality votes on Babylon blocks generated by CometBFT.\nA Babylon block that has received more than 2/3 finality votes from the active\nfinality provider set is BTC-finalized.'),(0,a.kt)("p",null,"Therefore, one can join BTC staking testnet via one (or more) of the three sets\nof actions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Become a ",(0,a.kt)("em",{parentName:"li"},"Babylon CometBFT validator")," and accept Babylon\ntest token delegations. For this, you need to\n",(0,a.kt)("a",{parentName:"li",href:"/docs/user-guides/installation"},"deploy and maintain a Babylon node")," and\n",(0,a.kt)("a",{parentName:"li",href:"/docs/user-guides/btc-staking-testnet/become-validator"},"register a CometBFT validator"),"."),(0,a.kt)("li",{parentName:"ol"},"Become a ",(0,a.kt)("em",{parentName:"li"},"finality provider")," and accept signet BTC delegations.\nFor this, you need to use the ",(0,a.kt)("a",{parentName:"li",href:"/docs/user-guides/btc-staking-testnet/finality-providers/overview"},"finality provider\nprogram"),".\nThis serves as the control plane for finality providers. It allows\ncreating, managing, and operating finality providers on the Babylon ledger.\nIts functionality is split into two daemons:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the EOTS manager daemon, which serves as a server for securely managing\nthe EOTS keys of the finality provider and generating signatures using them;\nand"),(0,a.kt)("li",{parentName:"ul"},"the finality provider daemon, which is responsible for maintaining a\nconnection with a Babylon node and submitting finality votes for new\nblocks after they are generated by CometBFT."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Self-Delegate")," BTC to your finality provider in a trustless way to gain\nvoting power. You can accomplish this by operating the ",(0,a.kt)("a",{parentName:"li",href:"./become-btc-staker"},"BTC Staker program"),". The most secure setup involves\na connection to a self-hosted Bitcoin node to submit and monitor the\nconfirmation state of staking transactions and\na connection to a Babylon node to submit staking requests.\nFor this testnet, we are utilising the BTC signet network to enable for\nharmless experimentation. Syncing a node to the BTC signet is super fast and\nshould not take more than 60 minutes. After performing a self-delegation\nto your finality provider you can shut down the Bitcoin node and the\nbtc-staker if you do not intend to make any further delegations.\nAlternatively, you could self-delegate BTC Signet tokens via the staking web\napplication when it becomes available.")),(0,a.kt)("p",null,"CometBFT validators and Finality providers are independent entities - you can be\nany of the 2. To fully participate in the testnet, we\nstrongly encourage experimenting with both and executing self-delegations."))}p.isMDXComponent=!0},85815:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/validator-deployment-overview-94880e77490ac05fb604c55a2970e038.png"}}]);